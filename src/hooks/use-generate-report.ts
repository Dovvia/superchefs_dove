import { RefObject } from "react";
import dayjs from "dayjs";
import advancedFormat from "dayjs/plugin/advancedFormat";
import { jsPDF } from "jspdf";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { useReactToPrint } from "react-to-print";
import NotoFont from "@/lib/noto";
import { naira } from "@/lib/utils";

dayjs.extend(advancedFormat);

/**
 * Generates report in PDF and Spreadsheet format.
 *
 * * You can use it for both cases
 *
 * * Use pdf() for PDF, and spreadsheet() for spreadsheet
 * @param {{data: {}}} props
 */
const useAccountReportGenerator = ({ data }) => {
  // Function to generate and download PDF report
  const generatePDF = () => {
    // Throw error if no data
    if (!data) {
      throw new Error("No data to generate report.");
    }
    const doc = new jsPDF();

    // Add font
    doc.addFileToVFS("Noto.ttf", NotoFont);
    doc.addFont("Noto.ttf", "Noto", "normal");
    doc.addFont("Noto.ttf", "Noto", "bold", 700);
    doc.setFont("Noto");

    // Add report title
    doc.setFontSize(18);
    doc.text(
      `Accounts Report for ${data?.userBranch
        ?.split("(")[1]
        ?.replace(")", "")} (${data?.userBranch?.split("(")[0]?.trim()})`,
      14,
      22
    );

    // Add date and filters
    doc.setFontSize(10);
    doc.text(`Generated on: ${dayjs().format("Do MMMM YYYY")}`, 14, 30);
    doc.text(`Generated by: ${data?.username}`, 14, 36);
    doc.text(`Branch: ${data?.userBranch}`, 14, 42);
    doc.text(`Date Range: ${data?.dateRange}`, 14, 48);
    doc.text(
      `Filters: Branch - ${data?.filters?.branches}, Product - ${data?.filters.products}`,
      14,
      54
    );

    // Add Financial Summary Table
    doc.setFontSize(14);
    doc.text("Financial Summary", 14, 67);

    // Add table rows manually
    let currentY = 80;
    const rowHeight = 12;

    // Helper function for alternating row backgrounds
    const addTableRow = (
      label: string | string[],
      value: number | string,
      details: string | string[],
      isHeader = false,
      isShaded = false
    ) => {
      doc.setFontSize(10);

      if (isShaded) {
        doc.setFillColor(240, 240, 240);
        doc.rect(14, currentY - 7, 182, rowHeight, "F");
      }
      if (isHeader) {
        doc.setTextColor("white");
        doc.setFont("Noto", "bold"); // Set font to bold
        doc.setFillColor(66, 139, 202);
        doc.rect(14, currentY - 7, 182, rowHeight, "F");
      } else {
        doc.setFont("Noto", "normal");
        doc.setTextColor("black");
      }

      doc.text(label, 20, currentY);

      // Use "â‚¦" for naira symbol instead of "$"
      if (typeof value === "string") {
        doc.text(value, 90, currentY);
      } else {
        doc.text(naira(value?.toFixed(2)), 90, currentY);
      }
      doc.text(details, 150, currentY);

      // Add horizontal line
      doc.setDrawColor(200, 200, 200);
      doc.line(14, currentY + 5, 196, currentY + 5);

      currentY += rowHeight;
    };

    // Add financial summary rows
    const financialSummaryArray = [
      {
        label: "Metric",
        value: "Value",
        details: "Details",
        isHeader: true,
        isShaded: false,
      },
      {
        label: "Total Revenue",
        value: data.financialSummary.totalRevenue,
        details: `From ${data.financialSummary.itemsSold} items sold`,
        isHeader: false,
        isShaded: true,
      },
      {
        label: "Total Cost",
        value: data.financialSummary.totalCost,
        details: "Operating expenses",
        isHeader: false,
        isShaded: false,
      },
      {
        label: "Net Profit",
        value: data.financialSummary.netProfit,
        details: "Revenue - Cost",
        isHeader: false,
        isShaded: true,
      },
      {
        label: "Cost/Revenue Ratio",
        value: `${data.financialSummary.costRevenueRatio}%`,
        details: "Cost as % of revenue",
        isHeader: false,
        isShaded: false,
      },
    ];
    financialSummaryArray.map((f) =>
      addTableRow(f.label, f?.value, f?.details, f?.isHeader, f?.isShaded)
    );
    // Add Revenue vs Cost section
    doc.setFontSize(14);
    currentY += 10;
    doc.text("Revenue vs Cost", 14, currentY);

    // Draw a simple bar representation (actual chart would require more complex canvas operations)
    currentY += 15;

    // Label for date
    doc.setFontSize(10);
    doc.text(data.revenueVsCost.labels[0], 45, currentY + 67);
    doc.text(data.revenueVsCost.labels[0], 85, currentY + 67);

    // Revenue bar
    doc.setFillColor(76, 175, 80); // Green
    doc.rect(
      40,
      currentY,
      30,
      (data.revenueVsCost.revenue[0] /
        (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
        100,
      "F"
    );
    doc.text("Revenue", 40, currentY - 5);

    // Cost bar
    doc.setFillColor(244, 67, 54); // Red
    doc.rect(
      80,
      // currentY + data.revenueVsCost.revenue[0] - data.revenueVsCost.cost[0],
      currentY +
        (data.revenueVsCost.revenue[0] /
          (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
          100 -
        (data.revenueVsCost.cost[0] /
          (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
          100,
      30,
      (data.revenueVsCost.cost[0] /
        (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
        100,
      "F"
    );
    doc.text(
      "Cost",
      80,
      currentY +
        ((data.revenueVsCost.revenue[0] /
          (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
          100 -
          (data.revenueVsCost.cost[0] /
            (data.revenueVsCost.revenue[0] + data.revenueVsCost.cost[0])) *
            100 -
          5)
    );

    // Add Sales Details Table
    // currentY += 80;
    // doc.setFontSize(14);
    // doc.text("Sales Details", 14, currentY + 15);

    // const salesData = data.salesDetails.map((sale) => [
    //   sale.date,
    //   sale.branch,
    //   sale.items,
    //   `$${sale.amount.toFixed(2)}`,
    // ]);

    // autoTable(doc, {
    //   startY: currentY + 5,
    //   head: [["Date", "Branch", "Items", "Amount"]],
    //   body: salesData,
    //   theme: "striped",
    //   headStyles: { fillColor: [66, 139, 202] },
    // });

    // Save the PDF
    doc.save("accounts_report.pdf");
  };

  // Function to generate and download Excel report
  const generateExcel = () => {
    // Throw error if no data
    if (!data) {
      throw new Error("No data to generate report.");
    }
    // Create workbook and worksheets
    const wb = XLSX.utils.book_new();

    // Financial Summary Sheet
    const summaryData = [
      ["Accounts Report"],
      [`Generated on: ${dayjs().format("Do MMMM YYYY")}`],
      [`Generated by: ${data.username}`],
      [`Branch: ${data.userBranch}`],
      [`Date Range: ${data.dateRange}`],
      [`Filters: ${data.filters.branches}, ${data.filters.products}`],
      [],
      ["Metric", "Value", "Details"],
      [
        "Total Revenue",
        `$${data.financialSummary.totalRevenue.toFixed(2)}`,
        `From ${data.financialSummary.itemsSold} items sold`,
      ],
      [
        "Total Cost",
        `$${data.financialSummary.totalCost.toFixed(2)}`,
        "Operating expenses",
      ],
      [
        "Net Profit",
        `$${data.financialSummary.netProfit.toFixed(2)}`,
        "Revenue - Cost",
      ],
      [
        "Cost/Revenue Ratio",
        `${data.financialSummary.costRevenueRatio.toFixed(1)}%`,
        "Cost as % of revenue",
      ],
      [],
      ["Revenue vs Cost"],
      ["Date", "Revenue", "Cost"],
      [
        data.revenueVsCost.labels[0],
        data.revenueVsCost.revenue[0],
        data.revenueVsCost.cost[0],
      ],
    ];

    const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);
    // XLSX.utils.book_append_sheet(wb, summaryWs, "Financial Summary");

    // // Sales Details Sheet
    // const salesData = [
    //   ["Date", "Branch", "Items", "Amount"],
    //   ...data.salesDetails.map((sale) => [
    //     sale.date,
    //     sale.branch,
    //     sale.items,
    //     `$${sale.amount.toFixed(2)}`,
    //   ]),
    // ];

    // const salesWs = XLSX.utils.aoa_to_sheet(salesData);
    // XLSX.utils.book_append_sheet(wb, salesWs, "Sales Details");

    // Generate Excel file and trigger download
    const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const blob = new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(blob, "accounts_report.xlsx");
  };

  return {
    pdf: generatePDF,
    spreadsheet: generateExcel,
  };
};

export default useAccountReportGenerator;

// Function to handle printing
export const useHandlePrint = (ref: RefObject<HTMLDivElement>) =>
  useReactToPrint({
    contentRef: ref,
    documentTitle: "Accounts Report",
  });
